local eventtap = require("hs.eventtap")
local keycodes = require("hs.keycodes")
local keyboard_utils = require("keyboard_layer_utils")
local config = require("config")

local event = eventtap.event
local keyboardConfig, logging = config.keyboard, config.logging

local layer_trigger_key_key_code = keycodes.map[keyboardConfig.layer_trigger_key]

local layerReplacements = keyboard_utils.replaceKeyLetterWithKeyCode(keyboardConfig.layer_remaps)

-- maybe use a table instead of primitives cause these are gonna be passed by reference.. noo that is only relevant when are passing them to a funciton.. here they are in the closure of the callback func so we are fine.
local spaceHeld = false
local spaceTimer = nil
-- set to true upon initial space keydown event.
local isLayerSoftActivated = false
-- after isLayerSoftActivated is set to true, if the user releases the space bar we should produce a space. But if the user types another key, we should set isLayerHardActivated to true and only produce keys from our remapped value until the user releases the spacebar, and in this case we will not produce a space.
local isLayerHardActivated = false
-- if the hard is activated, soft should also be alwyas activated

-- TODO jandle if no key is pressed shorlty after the spacebar allow reperaing spacebar
-- todo hande whne autoreperd is being done and we press ome key, shhould stop the repeat but dont tirgger layer jsut reset everything.


local keyEventHandler = function(e)
    -- if the keyevent has been generated by hs - in a previous call to this very same function, then do nothing - just pass event.
    -- https://github.com/Hammerspoon/hammerspoon/issues/1230#issuecomment-282597027
    if e:getProperty(event.properties.eventSourceUnixProcessID) ~= 0 then
        print('hs generated replacement event')
        return false
    end

    local keyCode = e:getKeyCode()

    if keyCode == layer_trigger_key_key_code then
        local isDown = e:getType() == event.types.keyDown

        if isDown then
            isLayerSoftActivated = true

            return true
        else
            if isLayerHardActivated then
                isLayerSoftActivated = false
                isLayerHardActivated = false

                return true
            else
                isLayerSoftActivated = false
                isLayerHardActivated = false

                local flags = keyboard_utils.getFlags(e)

                -- this works bit does not send the right keystroke to the right app which kind of sucks but we can probably fix it well. We shall see. So far my fingers seem to like this more than caps lock.
                -- eventtap.keyStroke(flags, keyboardConfig.layer_trigger_key, 0) -- Send normal space
                -- return true

                eventtap.keyStroke(flags, keyboardConfig.layer_trigger_key, 0) -- Send normal space
                return true

                -- -- this shoyld work, i mean it works but not with flags ?????
                -- local replacementEvent1 = event.newKeyEvent(flags, keyboardConfig.layer_trigger_key, false)
                -- local replacementEvent2 = event.newKeyEvent(flags, keyboardConfig.layer_trigger_key, true)

                -- -- still fucked does not work when swithing tabs and the last action was a layer
                -- but oldv1 does work so curios where the differende is

                -- return true, { replacementEvent1, replacementEvent2 }
            end
        end
    else
        -- some key other than our trigger key was pressed
        if isLayerSoftActivated then
            local isDown = e:getType() == event.types.keyDown

            if not isDown then
                -- handle rolling between key presses..
                -- we can handle rolling from a characted to space.
                -- but rolling from space to characted ... we really dont know if we should rempa or not .. we can include some timer. and if there is very little time between space up and char down we can rollback the remapped value and produce the character. That also means every remapped value will have a small delay....
                return false
            end

            isLayerHardActivated = true

            local flag, replacement = keyboard_utils.getReplacementValue(e, layerReplacements)

            if replacement then
                local flags = keyboard_utils.getFlags(e, flag, keyboardConfig.layer_trigger_key)

                --  maybe do e.setProperty(keycode)  https://www.hammerspoon.org/docs/hs.eventtap.event.html#setKeyCode insread of making a new event
                local replacementEvent = event.newKeyEvent(flags, replacement, isDown)

                if isDown then
                    -- if a key is held down, it actually sends a second down event, but with
                    -- the autorepeat property set, so duplicate that as well if this is a
                    -- key-down event:
                    replacementEvent:setProperty(event.properties.keyboardEventAutorepeat,
                        e:getProperty(event.properties.keyboardEventAutorepeat))
                end

                if logging then
                    print('remapped key event: ')
                    table.print(flags, 'mods: ')
                    print('key:', replacement, '\n')
                end

                -- throw out the original event and replace it with ours
                return true, { replacementEvent }
            else
                -- no remap for this key so we swallow the event
                print('No remap for this key')
                return true
            end
        else
            -- layer not active, we should just pass this event along
            return false
        end
    end




    -- skip loop rest of loop for now
    if true then
        -- print(layer_trigger_key_key_code)
        -- print(e:getKeyCode())
        print('skip')
        return false
    end


    if keyCode ~= layer_trigger_key_key_code or not isLayerSoftActivated or not isLayerHardActivated then
        return false
    end

    -- At this point, either the layer is active or the trigger key is pressed

    local isKeyDown = (e:getType() == event.types.keyDown)

    if keyCode == layer_trigger_key_key_code and not isLayerSoftActivated then
        if isKeyDown then
            isLayerSoftActivated = true
            -- todo start the repeat timer

            -- swallow event
            return true
        else
            error('we have missed somhitng, or this is the case where we allow repearing spaces and ')
        end
    end


    -- if keyCode ~= layer_trigger_key_key_code and isLayerActive then

    -- end




    print(spaceHeld)
    print(isLayerActive)
    print(spaceTimer)
    -- print(event:getType())



    if isKeyDown then
        if not spaceHeld then
            spaceHeld = true
            spaceTimer = hs.timer.doAfter(0.15, activateLayer) -- Detect if it's a hold
        end
        return true                                            -- Prevent space repeat
    else
        -- key up case
        if isLayerActive then
            deactivateLayer()
            print('active')
        else
            if spaceTimer then
                spaceTimer:stop()
                print(spaceTimer:running())
                -- so the issue is taht is seems sending space triegges a keydown and it starts looping
                -- event:setFlags({})  -- Disable any flags on the event (to prevent repeating)

                -- eventtap.keyStroke({}, "space", 0) -- Send normal space


                -- local event = eventtap.event
                --  TODO do it with flags   like here https://github.com/Hammerspoon/hammerspoon/issues/3512
                -- https://github.com/Hammerspoon/hammerspoon/issues/3512#issuecomment-1629690255

                -- stops working after i switch to a different app is just still sends the keystrokes to a different app.....
                -- local replacementEvent = e:newKeyEvent('space', true)

                -- this works even wnen i switch apps combined with disgarding this generated hammerspoon even at the top
                eventtap.keyStroke({}, keyboardConfig.layer_trigger_key, 0) -- Send normal space


                spaceHeld = false

                return true
                -- return true, { replacementEvent }
            end
            print('shouldspac')
        end
        spaceHeld = false
        return true
    end
end

keyListener = eventtap.new({ event.types.keyDown, event.types.keyUp }, keyEventHandler):start()
